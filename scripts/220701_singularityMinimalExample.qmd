---
title: "Singularity with R"
author: "Carl Beuchel"
date: "`r format(Sys.time(), '%d %B, %Y')`"
output:
  html_document:
  code_download: true
theme: spacelab #sandstone #flatfly #spacelab
highlight: pygments
toc: true  
toc-depth: 3
code-folding: show
number-sections: true
toc-float:
  smooth-scroll: true
editor: source
editor-options: 
  chunk-output-type: console
---


  
```{r setup}
#| include: false
#| echo: false
#| eval: false

# set a more recent R snapshot as source repo
r = getOption("repos") 
r["CRAN"] = "https://mran.microsoft.com/snapshot/2022-07-01"
options(repos = r)
rm(r)

# Update packages to that snapshot
update.packages(
  ask = FALSE, 
  checkBuilt = TRUE
  )

# Check unsuccessful updates packages
old.packages()

# Update V8
# Sys.setenv(DOWNLOAD_STATIC_LIBV8=1)
# Sys.getenv("DOWNLOAD_STATIC_LIBV8") # To get around V8 installation
# install.packages("V8")

# This needed a CXX17 definition in the Makevars
# install.packages("Boom") # still fails

# needed sudo R CMD rjavareconf 
# install.packages("rJava")

# install.packages("qs")
# install.packages("rstanarm")
```

## Setup

### Installation

Installation instructions for Singularity can be found in the [Singularity User Guide](https://docs.sylabs.io/guides/3.10/user-guide/quick_start.html) and the  [Singularity Admin Guide](https://docs.sylabs.io/guides/3.10/admin-guide/admin_quickstart.html). Following the steps listed under `Quick Start`, it is relatively simple to build Singularity from source.

### Autocompletion

Create an auto-completion file to enable Tab-completion when typing singularity commands in the bash command line.

```{bash}
#| eval: false

# Generate completion script
singularity completion bash > singularity

# Move it to the correct directory
sudo mv singularity /etc/bash_completion.d/singularity
```

Images can either be build locally using the `singularity buid` command in conjunction with a configuration file (`.def`-file) or pulled from Docker-Hub, an online resource that makes a large variety of images available for users.

```{mermaid}
flowchart LR
  A(.def-File) --> B(.sif-Image)
  C[Docker Hub] --> B(.sif-Image)
  
```

The first example in the Singularity documentation is to run an image from Docker hub, the infamous lolcow. The `--debug`-flag creates verbose output. The `singularity run`-command does not download the image into the local working directory, but into `.singularity/cache`. 

```{bash}
#| eval: false

# display the content of the .singularity directory prior to running the command 
tree .singularity/cache

# Download and run the image from docker hub
singularity --debug run library://lolcow

# display the content of the .singularity directory after running the command 
tree .singularity/cache
```

The cache can be inspected using the `singularity cache list|clean` commands. Images are named after their SHA256-hash, which can make managing many images in cache confusing.

```{bash}
#| eval: false

# lists total number of containers in cache and the occupied space
singularity cache list

# deletes all files currently in the `.singularity/cache` folder, while retaining the directories.
singularity cache clean
```

### Pull a docker image from Docker Hub

A library with R-specific docker images can be found at [Rocker](https://www.rocker-project.org/images/). Their website also includes an introduction to [Singularity](https://www.rocker-project.org/use/singularity). The following command pulls and converts an [image](https://www.rocker-project.org/images/base/r-devel) from the docker hub, a repository for pre-build docker images from Rocker. Specifications of each image can be found on the respective websites. The advantage of this is to be able do create a singularity container without specifying a .def file. The large amount of pre-configured images allows users to quickly download containers that come with pre-installed applications for a given task. This will download a file called `r-devel_latest.sif`, a singularity container file into the current working directory. 

```{bash}
#| eval: false

# Download the latest version of the r-devel Rocker Image from Docker Hub
singularity pull docker://rocker/r-devel

# Instead of downloading, the image can be build using the local singularity installation
singularity build r-devel-built.sif docker://rocker/r-devel
```

The dockerfile for this image can be retrieved from [GitHub](https://raw.githubusercontent.com/rocker-org/r-devel/master/Dockerfile). The following chunk downloads the respective dockerfile and deposits it in the folder `resources`.

```{bash}
#| eval: false

# Download the docker file from github
wget https://raw.githubusercontent.com/rocker-org/r-devel/master/Dockerfile

# move it into a seperate folder
mkdir resources
mv Dockerfile resources/r_devel_dockerfile
```

The file can be inspected to see the configuration for the downloaded image. Dockerfiles are however not compatible with singularity and cannot be used to build `.sif`-image. Singularity image build recipes are called definition files and end on `.def`. Documentation is again available through the [Sylabs Singularity documentation](https://docs.sylabs.io/guides/3.10/user-guide/definition_files.html).

```{bash}
cat ../resources/r_devel_dockerfile
```

### Run Image

Users can interact with containers in several ways: Run a pre-specified command, 

* TODO

```{bash}
#| eval: false

# This command runs the command prespecified in the image
singularity run r-devel_latest.sif

# This command runs a user-specified command, in this case a call to R that generates 100 normally distributed numbers.
singularity exec r-devel_latest.sif R --slave -e "rnorm(1e2)"

# TODO
# Are changes persistent? 
# immer noch auf Rechner fs, nicht "im" container
singularity shell r-devel_latest.sif

```

### The definition file

Specifications of the singularity definition file can again be found in the [official documentation](https://docs.sylabs.io/guides/3.10/user-guide/definition_files.html#definition-files). It consists of several blocks that define the build-instructions.

*  TODO

For an introduction, we can build our own `.sif`-image based on the light-weight docker image [Alpine](https://hub.docker.com/_/alpine).

```{bash}
#| eval: false


FROM: alpine:latest


```


### Investigate Image

Several commands can be used to inspect properties of a .sif file (singularity image file).

```{bash}
#| eval: false

# Displays some meta-data about the image, such as author, licence, build-date
singularity inspect r-devel_latest.sif

# Displays info of image header (TODO)
singularity sif header r-devel_latest.sif

# List data objects in a SIF file
singularity sif list r-devel_latest.sif

# Print information about the data objects
singularity sif info 1 r-devel_latest.sif
singularity sif info 2 r-devel_latest.sif
singularity sif info 3 r-devel_latest.sif
singularity sif info 4 r-devel_latest.sif


```

### User capabilities


```{bash}
#| eval: false

singularity capabilities

```






*   was ist mit runnern?
*   Motivation: Idiosynchratien von R und HPC streamlinen, Plattformübergreifende Analysem, Reproduzierbarkeit
*   Installation: Doku admin und user guide
*   SLURM, Nextflow
*   Rocker als Base-R container
*   OpenBLAS etc?
*   welche R version
*   wie können wir die containergröße gering halten?
*   Download über Rocker
*   eigene Defininition von .sif per .def
*   was ist der container?
*   wie baue ich einen container (base image, per .def file installation vornehmen)
*   https://jsta.github.io/r-docker-tutorial/ 
*   https://rviews.rstudio.com/2017/03/29/r-and-singularity/
*   custom .def file https://github.com/nickjer/singularity-r
*   Rocker Image overview: 
*   Rocker Singularity Intro: https://www.rocker-project.org/use/singularity
*   Singularity erlaubt unit test - Das brauchen wir! "singularity test"
*   create a "main.R" in the WD and run with "singularity run"
*   create image from .def with "sudo singularity create --size 4000 tensorflow.img && \ sudo singularity bootstrap tensorflow.img tensorflow.def"
